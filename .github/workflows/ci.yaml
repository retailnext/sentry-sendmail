---
name: CI
on:
  pull_request:
    branches:
      - main
  merge_group:
  push:
    branches:
      - main
    tags:
      - v*
env:
  CGO_ENABLED: '0'
  # renovate: datasource=github-releases depName=golangci/golangci-lint versioning=semver-coerced
  GOLANGCI_LINT_VERSION: "v1.64.8"
  # renovate: datasource=github-releases depName=goreleaser/goreleaser versioning=semver-coerced
  GORELEASER_VERSION: "v2.11.1"
jobs:
  go:
    name: Go
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
      - name: Set up Go
        uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5
        with:
          go-version-file: 'go.mod'
      - name: golangci-lint
        uses: golangci/golangci-lint-action@55c2c1448f86e01eaae002a5a3a9624417608d84 # v6
        with:
          version: ${{ env.GOLANGCI_LINT_VERSION }}
      - name: Download dependencies
        run: go mod download
      - name: Verify dependencies
        run: go mod verify
      - name: Test
        run: go test -v ./...
      - name: Clean
        run: |
          git clean -ffdx
          git reset --hard HEAD
      - name: GoReleaser (Snapshot)
        if: "!startsWith(github.ref, 'refs/tags/')"
        uses: goreleaser/goreleaser-action@9c156ee8a17a598857849441385a2041ef570552 # v6
        with:
          args: release --snapshot --clean
          version: ${{ env.GORELEASER_VERSION }}
      - name: Upload Snapshot
        if: "!startsWith(github.ref, 'refs/tags/')"
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4
        with:
          name: sentry-sendmail
          if-no-files-found: error
          path: |
            dist/*.deb
            dist/*.tar.gz
      - name: Unshallow
        if: startsWith(github.ref, 'refs/tags/')
        run: git fetch --prune --unshallow
      - name: GoReleaser (Release)
        uses: goreleaser/goreleaser-action@9c156ee8a17a598857849441385a2041ef570552 # v6
        if: startsWith(github.ref, 'refs/tags/')
        with:
          version: ${{ env.GORELEASER_VERSION }}
          args: release --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
